/*Resources sampling https://app.clickup.com/t/8693r457g*/

/*Note - this map will append sampled resource to existing file. to start from scratch, delete file*/

(
  /* global parameters */
  $pageSize := 10;
  $maxRetriesForNewResource := 20;
  /*****************/

  /* date generator function */
  $newRandomDate := function($min, $max){(
    $minMs := $toMillis($min);
    $maxMs := $toMillis($max);
    $diffMs := $maxMs - $minMs;
    $randomMs := $random() * $diffMs;
    $fromMillis(($minMs + $randomMs),'[Y0001]-[M01]-[D01]');
  )};

  /* function that calculates the absolute diff between dates in milliseconds */
  $dateDiffMillis := function($date1, $date2){($abs($toMillis($date1)-$toMillis($date2)))};

  /* function that fetches resources above and below a requested date and returns them sorted by proximity */
  $getClosestResources := function($resourceType, $date, $searchParam, $elementName) {(
    $info('$getClosestResources called');
    $info({'$resourceType, $date, $searchParam, $elementName': [$resourceType, $date, $searchParam, $elementName]});
    /* get pages from above and below the date */
      $geBundle := $search($resourceType, {$searchParam: 'ge' & $date, '_sort': $searchParam, '_count': $pageSize, '_elements': $elementName});
      $info({'$geBundle count': $count($geBundle.entry)});
      $leBundle := $search($resourceType, {$searchParam: 'le' & $date, '_sort': '-' & $searchParam, '_count': $pageSize, '_elements': $elementName});
      $info({'$leBundle count': $count($leBundle.entry)});
      /* sort the results by absolute diff from the selected date */
      [$geBundle.entry.resource, $leBundle.entry.resource]/*^($dateDiffMillis($date, $lookup($, $elementName)))*/;
  )};

  /* recursive function that adds a single new resource to an accumulating list */
  /* educational note: */
  /*     note that the self-call is at the final step of the function. */
  /*     this is called "tail recursion" and it helps prevent stack overflow. */
  /*     see: https://docs.jsonata.org/programming#tail-call-optimization-tail-recursion */
  $addResource := function($resourceType, $searchParam, $elementName, $minDate, $maxDate, $accumulating, $iterationCounter){(
    $info('$addResource called');
    $info({'$resourceType, $searchParam, $elementName, $minDate, $maxDate, $accumulating, $iterationCounter': [$resourceType, $searchParam, $elementName, $minDate, $maxDate, $accumulating, $iterationCounter]});
    /* reset counter to 1 if not stated otherwise */
    $iterationCounter := $exists($iterationCounter) ? $iterationCounter : 1;
    /* initialize an empty list if accumulator not passed */
    $accumulating := $exists($accumulating) ? $accumulating : [];
    /* generate a new random date */
    $randomDate := $newRandomDate($minDate, $maxDate);
    /* get list of patients closest to the random date by birthday, sorted by proximity */
    $searchResults := $getClosestResources($resourceType, $randomDate, $searchParam, $elementName);
    $info({'$searchResults count': $count($searchResults)});
    /* get the closest one not collected yet */
    $filterred := $searchResults[$not(id in $accumulating)];
    $selection := $filterred[$count(filterred)*$random()];
    $info({'$selection count': $count($selection)});
    /* check the results */
    $exists($selection) ? (
      /* found a new patient - add its id to the list and return the updated list */
      [$accumulating, $selection.id]
    ) : (
      /* no new patient found for this date */
      /* if we have reached max iterations - stop looking */
      $iterationCounter >= $maxRetriesForNewResource ? (
        /* return accumulated list as-is */
        $accumulating
      ) : (
        /* not reached max iterations - try again with a new random date */
        $addResource($resourceType, $searchParam, $elementName, $minDate, $maxDate, $accumulating, $iterationCounter + 1)
        /* ^ this is the "tail call" */
      )
    )
  )};

  /* wrapper function that does the collection of the list of resources */
  $collectResources := function($resourceType, $amountToCollect, $minDate, $maxDate, $searchParam, $elementName){(
    $info('$collectResources called');
    $info({'$resourceType, $amountToCollect, $minDate, $maxDate, $searchParam, $elementName': [$resourceType, $amountToCollect, $minDate, $maxDate, $searchParam, $elementName]});
    /* iteration function that adds resources recursively, as long as: */
    /* 1. the previous step succeeded in finding a new resource */
    /* 2. the requested amount hasn't been collected yet */
    $iterator := function($currentList, $previousList){(
      $info('$iterator called');
      $info({'$currentList, $previousList': [$currentList, $previousList]});
      $count($currentList)>0 and ($count($currentList) = $count($previousList) or $count($currentList) >= $amountToCollect) ? (
        /* the stop condition is met - return list and stop iterating */
        $currentList
      ) : (
        /* try to add one patient and continue */
        $updatedList := $addResource($resourceType, $searchParam, $elementName, $minDate, $maxDate, $currentList);
        $info({'$updatedList count': $count($updatedList)});
        /* tail call */
        $iterator($updatedList, $currentList)
      )
    )};
    /* call the iterator with empty initial lists */
    $ids := $iterator();

    /* transform the list of resource id's to a list of references (ready for $resolve) */
    $ids.($join([$resourceType, $], '/'))
  )};

  /*call the wrapper function with relevant keys, values will come from inputcall the wrapper function with relevant keys, values will come from input*/
   $instancesList := $collectResources(resourceType, amountToCollect, minDate, maxDate, searchParam, elementName);

/*Write (append) sampled resources to existing file*/
  $currentFile := $readFile('SampledResources.json');
  $ApendedFile := $append($currentFile,$instancesList.$resolve($));
  $writeFile($ApendedFile,'SampledResources.json');

/*testing the function:*/ 
  /*$minDate := '1950-01-01';*/
  /*$maxDate := $now();*/
  /*$collectResources('Patient', 7, $minDate, $maxDate, 'birthdate', 'birthDate');*/

/*Example input (derived from the above example)*/
    /*{*/
/*      "resourceType": "Patient",*/
      /*"amountToCollect": 1000,*/
      /*"minDate": "1900-01-01",*/
      /*"maxDate": "2020-01-01",*/
      /*"searchParam": "birthdate",*/
      /*"elementName": "birthDate"*/
    /*}*/

    /*{*/
/*      "resourceType": "Encounter",*/
      /*"amountToCollect": 100,*/
      /*"minDate": "2018-06-01",*/
      /*"maxDate": "2023-01-01",*/
      /*"searchParam": "_lastUpdated",*/
      /*"elementName": "lastUpdated"*/
    /*}*/

/*    {*/
/*      "resourceType": "Practitioner",*/
      /*"amountToCollect": 1000,*/
      /*"minDate": "1900-01-01",*/
      /*"maxDate": "2020-01-01",*/
      /*"searchParam": "_lastUpdated",*/
      /*"elementName": "lastUpdated"*/
    /*}*/

/*    {*/
/*      "resourceType": "PractitionerRole",*/
      /*"amountToCollect": 1000,*/
      /*"minDate": "1900-01-01",*/
      /*"maxDate": "2020-01-01",*/
      /*"searchParam": "_lastUpdated",*/
      /*"elementName": "lastUpdated"*/
    /*}*/

/*    {*/
      /*"resourceType": "Observation",*/
      /*"amountToCollect": 5000,*/
      /*"minDate": "2018-01-01",*/
      /*"maxDate": "2025-01-01",*/
      /*"searchParam": "date",*/
      /*"elementName": "effectiveDateTime"*/
    /*}*/
    

/*Split the result file into stand alone resource files for Validation*/
  $readFile('SampledResources.json').$writeFile($,'['&resourceType&']_['&id&'].json');
)