/*FHIR API tests https://app.clickup.com/t/8693rtn67*/

(
  /*Clean resoults file - all tests append new data to existing file, hence need to delete prior to tests run*/
    $writeFile('','FHIRAPITestsResultes.json');

  /*Define a Function that runs FHIR API tests based on input params*/
    $RunFhirApiTests := function($baseUrl, $resourceType, $searchPrms){(
      /*Global Params*/
        $id := $readFile('SampledResources.json')[resourceType = $resourceType][0].id;
        $url := $resourceType & '/' & $id;

      /*Test capability statement --------------------------------------------*/

      /*Request & Response*/
        $ReadResponse := $http({
              'method':'get',
              'baseUrl': $baseUrl,
              'headers' : {'content-type': 'application/fhir+json'},
              'url': 'metadata'
              });
      
        /*Test11 - capability statement exist*/
        ($ReadResponse.status=200 and $ReadResponse.data.resourceType='CapabilityStatement') ?
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '11', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test?1 - Capability statement exist'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '11', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test11 - Capability statement exist'}
          ;
          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');  
      
      /*Test Read, read existing instance --------------------------------------------*/

      /*Request & Response*/
        $ReadResponse := $http({
              'method':'get',
              'baseUrl': $baseUrl,
              'headers' : {'content-type': 'application/fhir+json'},
              'url': $resourceType & '/' & $id
              });

        /*Test1 - Response status*/
        ($ReadResponse.status=200 and $ReadResponse.statusText='OK') ?
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '1', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test1 - Response status, read existing instance'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '1', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test1 - Response status, read existing instance'}
          ;
          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');

        /*Test2 - resource type*/
        ($ReadResponse.data.resourceType = $resourceType) ? 
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '2', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test2 - Resource type, read existing instance'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '2', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test2 - Resource type, read existing instance'}
          ;
          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');

        /*Test3 - headers, content-type*/
        ($substringBefore($ReadResponse.headers.'content-type',';') = 'application/fhir+json') ? 
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '3', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test3 - headers, content-type, read existing instance'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '3', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test3 - headers, content-type, read existing instance'}
          ;
          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');

        /*Test4 - resource id matches regex*/
        ($matches($ReadResponse.data.id, '[A-Za-z0-9\\-\\.]{1,64}')) ?
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '4', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test4 - resource id matches regex, read existing instance'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '4', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test4 - resource id matches regex, read existing instance'}
          ;
          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');

        /*Test5 - id in response matches id in request*/
        ($ReadResponse.data.id = $id) ?  
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '5', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test5 - id in response matches id in request, read existing instance'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '5', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test5 - id in response matches id in request, read existing instance'}
          ;
          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');

      
      /*Test Read, read NON existing instance --------------------------------------------*/

      /*Request & Response*/
        $ReadResponse := $http({
              'method':'get',
              'baseUrl': $baseUrl,
              'headers' : {'content-type': 'application/fhir+json'},
              'url': $resourceType & '/' & $uuid()
              });

        /*Test10 - Response status, read NON existing instance*/
        ($ReadResponse.status=404 /*and $ReadResponse.statusText='OK'*/) ?
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '10', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test10 - Response status, read NON existing instance'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '10', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test10 - Response status, read NON existing instance'}
          ;
          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');

      
      /*Test Search --------------------------------------------*/
        /*Request & Response*/    
          $SearchResponse := $http({
                'method':'get',
                'baseUrl': $baseUrl,
                'url': $resourceType & '?' & $searchPrms
                });
      
        /*Test6 - Search response status*/
          ($SearchResponse.status=200 and $SearchResponse.statusText='OK') ? 
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '6', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test6 - Search response status'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '6', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test6 - Search response status'}
          ;
          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');
            
        /*Test7 - Search paging*/
          $linkRelation := $distinct($SearchResponse.data.link.relation); /*Prep*/
          
          $SearchResponse.data.total ~> $exists() ~>$not() ? /*check if there ISNT a bundle.total path (use isnt for code redability)*/
            $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '7', "TestResult" : 'Skip',"TestResultMsg" : 'Skip : Test7 - Search paging, due to lack of search bundle.total element'} /*bundle.total dosent exist => skip*/
            : $SearchResponse.data.total > ($SearchResponse.data.entry.resource[resourceType != 'OperationOutcome'].id~>$count()) ? /*if bundle.total dose exist => check bundle.total > returned resource count (excluding OperationOutcome)*/
                ($count($linkRelation)>2 and 'self' in $linkRelation) ? /*check for paging => 2 distinct links with one of them = self*/
                  ($TestResult :=  {"TestCreateDate" : $now(),"TestID" : '7', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test7 - Search paging'}) 
                  : ($TestResult :=  {"TestCreateDate" : $now(),"TestID" : '7', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test7 - Search paging'})
                : ($TestResult :=  {"TestCreateDate" : $now(),"TestID" : '7', "TestResult" : 'Skip',"TestResultMsg" : 'Skip : Test7 - Search paging, bundle.total ISNT > returned resource count (excluding OperationOutcome). It may be equal (this is valid) or lower (unexpected)'}) /*bundle.total isnt > resource count, most */
          ;

          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');

        /*Test8 - Confirm Bundle type is 'searchset*/
          ($SearchResponse.data.type = 'searchset') ? 
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '8', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test8 - Confirm Bundle type is searchset'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '8', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test8 - Confirm Bundle type is searchset'}
          ;
          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');

        /*Test9 - response payload contains the Bundle resource type*/
          ($SearchResponse.data.resourceType = 'Bundle') ?
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '9', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test9 - response payload contains the Bundle resource type'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '9', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test9 - response payload contains the Bundle resource type'}
          ;
          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');

        /*Test22 - Server shall corectly populate entry.search.mode. On search.mode=outcome*/
        ($SearchResponse.data.entry[search.mode='outcome'] ~> $exists()) ?
          /*TRUE1*/ ('OperationOutcome' in ($SearchResponse.data.entry[search.mode='outcome'].resource.resourceType)) ?
            /*TRUE2*/ ($TestResult := {"TestCreateDate" : $now(),"TestID" : '22', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test22 - Server shall corectly populate entry.search.mode. On search.mode=outcome'})
            /*FALSE2*/: ($TestResult :=  {"TestCreateDate" : $now(),"TestID" : '22', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test22 - Server shall corectly populate entry.search.mode. On search.mode=outcome'})
          /*FALSE1*/: ($TestResult :=  {"TestCreateDate" : $now(),"TestID" : '22', "TestResult" : 'Skip',"TestResultMsg" : 'Skip : Test22 - Server shall corectly populate entry.search.mode. On search.mode=outcome, no OperationOutcome in bundle'})
        ;

        $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');     

        /*Test28 - Server SHALL reject any search request that contains a modifier that the server does not support for that parameter*/
          $http({
                    'method':'get',
                    'baseUrl': $baseUrl,
                    'headers' : {'content-type': 'application/fhir+json'},
                    'url': 'Patient?birthdate:exact=eq3000-01-01' /*:exact is a valid modifier only for string search params and hence should raise 400 error*/
                    }).status=400 ?
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '28', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test28 - Server SHALL reject any search request that contains a modifier that the server does not support for that parameter'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '28', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test28 - Server SHALL reject any search request that contains a modifier that the server does not support for that parameter'}
          ;

          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');

        /*Test29 - If the search fails the return value return value SHALL be a status code 4xx or 5xx*/
          $http({
                    'method':'get',
                    'baseUrl': $baseUrl,
                    'headers' : {'content-type': 'application/fhir+json'},
                    'url': 'Patient?birthdate=xxx' /*intentionally fail search using invalid value*/
                    }).status.$string() ~> $substring(0,1) in ['4','5']?
          $TestResult := {"TestCreateDate" : $now(),"TestID" : '29', "TestResult" : 'Pass',"TestResultMsg" : 'Pass : Test29 - If the search fails the return value return value SHALL be a status code 4xx or 5xx'}
          : $TestResult :=  {"TestCreateDate" : $now(),"TestID" : '29', "TestResult" : 'Fail',"TestResultMsg" : 'Fail : Test29 - If the search fails the return value return value SHALL be a status code 4xx or 5xx'}
          ;

          $writeFile([$readFile('FHIRAPITestsResultes.json'),$TestResult],'FHIRAPITestsResultes.json');
    )};

  /*Run FHIR API tests based on params*/
    /*{*/
      /*"baseUrl": "https://server.fire.ly/r4",*/
      /*"resourceType": "Patient",*/
      /*"searchPrms": "birthdate=ge1900-01-01"*/
    /*}*/

    $RunFhirApiTests (baseUrl, resourceType, searchPrms);

)